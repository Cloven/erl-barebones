%% If you have a sys.config file you need to tell relx where it is. If you do
%% that relx will include the sys.config in the appropriate place
%% automatically.
%%{sys_config, "./config/sys.config"}.

%% relx will include erts by default. However, if you don't want to include
%% erts you can add the `include_erts` tuple to the config and tell relx not
%% to include it.
%%{include_erts, false}.

%% The default start script relx creates is basic. For a more complete start
%% script add the extended_start_script option.
{extended_start_script, true}.

{default_release, barenode, "0.0.1"}.
{sys_config, "./config/sys.config"}.

{release, {barenode, "0.0.1"},
 [bare,
 runtime_tools]
  }.

%%{release, {bare, "0.0.2"},
%% [bare,
%%
%%  %% This is the second constraint syntax, it is interchangeable with the tuple
%%  %% syntax and its up to you which you find more readable/usable.
%%  "erlware_commons>=0.8.1",
%%
%%  %% You can put the release load types in the release spec here in exactly the
%%  %% same way that you can do it for a normal relfile. The syntax is
%%  %% {<constraint>, <type>}.
%%  {neotoma, load}]}.

%% During development its often the case that you want to substitute the app
%% that you are working on for a 'production' version of an app. You can
%% explicitly tell relx to override all versions of an app that you specify
%% with an app in an arbitrary directory. relx will then symlink that app
%% into the release in place of the specified app. be aware though that relx
%% will check your app for consistancy so it should be a normal OTP app and
%% already be built.
%%{overrides, [{sexpr, "../sexpr"}]}.


%% In some cases you might want to add additional functionality to relx. You
%% can do this via a 'provider'. A provider is an implementation of the relx
%% provider behaviour. This probably shouldn't be needed very often.
%%{add_providers, [my_custom_functionality]}.
